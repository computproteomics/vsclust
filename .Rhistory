stringsAsFactors=FALSE)
}, error=function(e) {
stop("Failed to parse STRING API response as TSV:\n", e$message)
})
# 6) Check if data frame is empty or if required columns are missing
needed_cols <- c("term","description","p_value","fdr","category",
"number_of_genes","number_of_genes_in_background")
if (!all(needed_cols %in% colnames(df))) {
warning("Some expected columns are missing from the STRING response. Possibly no results.")
return(NULL)
}
if (nrow(df) == 0) {
warning("STRING returned an empty table (no enrichment).")
return(NULL)
}
# 7) Filter for requested category (if you provided multiple, we can subset)
if (!is.null(category) && length(category) >= 1) {
df <- df[df$category %in% category, , drop=FALSE]
}
if (nrow(df) == 0) {
warning("No terms remain after filtering by category.")
return(NULL)
}
# 8) Build the result table, similar to an "enrichResult"
Over <- data.frame(
ID          = df$term,           # e.g. "GO:0006260"
Description = df$description,    # e.g. "DNA replication"
pvalue      = as.numeric(df$p_value),
fdr         = as.numeric(df$fdr),
geneCount   = as.numeric(df$number_of_genes),  # how many from our input
bgCount     = as.numeric(df$number_of_genes_in_background),# how many in STRING's background
Category    = df$category,       # e.g. "Process", "KEGG", ...
stringsAsFactors = FALSE
)
# 9) We'll create p.adjust from pvalue ourselves, ignoring the 'fdr' from STRING if we want
Over$p.adjust <- stats::p.adjust(Over$pvalue, method="BH")
# 11) Filter by SSize, maxGSSize, pvalueCutoff, etc.
keep_padjust   <- Over$p.adjust <= adjpvalueCutoff
keep_idx <- keep_padjust
Over <- Over[keep_idx, , drop=FALSE]
if (nrow(Over) == 0) {
warning("No terms passed the final filtering steps.")
return(NULL)
}
# 11) Return the final data.frame
#     Or you could build an S4 'enrichResult' object if you want clusterProfiler-like usage.
new("enrichResult", result = Over, pvalueCutoff = adjpvalueCutoff,
pAdjustMethod = "BH", organism = as.character(unique(df$ncbiTaxonId)), ontology = "STRINGout",
keytype = "varied")
}
enrichSTRING_API(A[1:100,1])
runApp('inst/shiny')
runApp('inst/shiny')
devtools::load_all()
runApp('inst/shiny')
runApp('inst/shiny')
devtools::load_all()
runApp('inst/shiny')
runApp('inst/shiny')
?dotplot
devtools::load_all()
?dotplot
runApp('inst/shiny')
devtools::load_all()
runApp('inst/shiny')
?dotplot
devtools::load_all()
runApp('inst/shiny')
devtools::load_all()
devtools::load_all()
runApp('inst/shiny')
devtools::load_all()
enriched <- enrichSTRING_API(A[1:100,1])
x <- enriched$fullFuncs
y <- enriched$redFuncs
enriched
x <- enriched$fullFuncs
y <- enriched$redFuncs
colnames(enriched)
enriched
y <- enriched
dotplot(y,title=paste("BHI:",round(BHI,digits=3)),showCategory=20,font.size=10, x = "GeneCount")
y
enrichplot::dotplot
showMethods(dotplot)
class(enriched)
dotplot(y)
class(enriched, x = "GeneCount")
enriched@result
class(enriched, x = "geneCount")
class(enriched)
dotplot(y, x= "geneCount")
enriched@result <- cbind(enriched@result, GeneRatio = 1)
dotplot(y, x= "geneCount")
dotplot(y)
enriched@result
enriched@result <- cbind(enriched@result, GeneRatio = "1/3")
dotplot(y)
getMethod(dotplot, enrichResult)
getMethod(dotplot, "enrichResult")
enrichplot:::dotplot.enrichResult()
enrichplot:::dotplot.enrichResult
fortify(enriched, split = split)
fortify(enriched)
df <- fortify(enriched)
df$Description <- factor(df$Description, levels = rev(unique(df$Description[idx])))
df$Description <- factor(df$Description, levels = rev(unique(df$Description[idx])))  idx <- order(df[[orderBy]], decreasing = decreasing)
idx <- order(df[[orderBy]], decreasing = decreasing)
ggplot(df, aes_string(x = x, y = "Description", size = size,
fill = colorBy)) + geom_point() + aes(shape = I(enrichplot_point_shape)) +
set_enrichplot_color(type = "fill", name = color) + scale_y_discrete(labels = label_func) +
ylab(NULL) + ggtitle(title) + theme_dose(font.size) +
scale_size(range = c(3, 8))
ggplot(df, aes_string(x = "geneCount", y = "Description",
fill = colorBy)) + geom_point() + aes(shape = I(enrichplot_point_shape)) +
set_enrichplot_color(type = "fill", name = color) + scale_y_discrete(labels = label_func) +
ylab(NULL) +  + theme_dose(font.size) +
scale_size(range = c(3, 8))
ggplot(df, aes_string(x = "geneCount", y = "Description",
fill = "fdr")) + geom_point() + aes(shape = I(enrichplot_point_shape)) +
+ scale_y_discrete(labels = label_func) +
ylab(NULL) +  + theme_dose(font.size) +
scale_size(range = c(3, 8))
ggplot(df, aes_string(x = "geneCount", y = "Description",
fill = "fdr")) + geom_point() + aes(shape = I(enrichplot_point_shape)) +
+
ylab(NULL) +  + theme_dose(font.size) +
scale_size(range = c(3, 8))
ggplot(df, aes_string(x = "geneCount", y = "Description",
fill = "fdr")) + geom_point() + aes(shape = I(enrichplot_point_shape)) +
+
ylab(NULL) +  theme_dose(font.size) +
scale_size(range = c(3, 8))
ggplot(df, aes_string(x = "geneCount", y = "Description",
fill = "fdr")) + geom_point() + aes(shape = I(enrichplot_point_shape)) +
ylab(NULL) +  + theme_dose(font.size) +
scale_size(range = c(3, 8))
ggplot(df, aes_string(x = "geneCount", y = "Description",
fill = "fdr")) + geom_point() + aes(shape = I(enrichplot_point_shape)) +
ylab(NULL) +
scale_size(range = c(3, 8))
dotplot(y)
dotplot(y, x = "count")
dotplot(y, x = "Count")
class(y)
dotplot(y, x = "geneCount")
y@dr
y@df
y@result
y@result$Count <- y@result$geneCount
dotplot(y, x = "geneCount")
dotplot(y, x = "Count")
getMethods(dotplot)
findMethods(dotplot)
enriched <- vsclust::runFuncEnrich(cl, pars$proteins, input$infosource)
getMethod(dotplot, "enrichResult")
enrichplot:::dotplot.enrichResult()
enrichplot:::dotplot.enrichResult
dotplot(y, size = "geneCount")
?fortify
fortify(y, showCategory = "KEGG", NULL)
enrichplot:::fortify.enrichResult()
enrichplot:::fortify.enrichResult
enrichplot:::fortify_internal
enrichplot:::parse_ratio
y@result$GeneRatio <- 1
y@result
dotplot(y, size = "geneCount")
runApp('inst/shiny')
devtools::load_all()
devtools::document()
devtools::load_all()
rm(list = c("enrichSTRING_API"))
devtools::load_all()
runApp('inst/shiny')
enrichplot:::dotplot.compareClusterResult()
enrichplot:::dotplot.compareClusterResult
devtools::load_all()
runApp('inst/shiny')
A
enrichSTRING_API(A[1:100,1])
enrichSTRING_API(A[1:100,1])$results
enrichSTRING_API(A[1:100,1])@results
b <- enrichSTRING_API(A[1:100,1])
enrichSTRING_API(A[1:100,1])@result
enrichSTRING_API(A[1:100,1], c("Function","Compartment"))@result
enrichSTRING_API(A[1:100,1], category = c("Function","Compartment"))@result
enrichSTRING_API(A[1:100,1], category = list("Function","Compartment"))@result
enrichSTRING_API(A[1:100,1], category = list("Function"))@result
enrichSTRING_API(A[1:100,1], category = c("Function"))@result
enrichSTRING_API(A[1:100,1], category = c("KEGG"))@result
devtools::load_all()
runApp('inst/shiny')
devtools::load_all()
devtools::load_all()
runApp('inst/shiny')
devtools::load_all()
devtools::load_all()
runApp('inst/shiny')
devtools::load_all()
runApp('inst/shiny')
devtools::load_all()
runApp('inst/shiny')
runApp('inst/shiny')
devtools::load_all()
runApp('inst/shiny')
devtools::load_all()
runApp('inst/shiny')
#### Input parameters, only read when now parameter file was provided
## All principal parameters for running VSClust can be defined as in the
## shinyapp at computproteomics.bmb.sdu.dk/Apps/VSClust
# name of study
Experiment <- "ProtExample"
# Number of replicates/sample per different experimental condition (sample
# type)
NumReps <- 3
# Number of different experimental conditions (e.g. time points or sample
# types)
NumCond <- 4
# Paired or unpaired statistical tests when carrying out LIMMA for
# statistical testing
isPaired <- FALSE
# Number of threads to accelerate the calculation (use 1 in doubt)
cores <- 1
# If 0 (default), then automatically estimate the cluster number for the
# vsclust
# run from the Minimum Centroid Distance
PreSetNumClustVSClust <- 0
# If 0 (default), then automatically estimate the cluster number for the
# original fuzzy c-means from the Minimum Centroid Distance
PreSetNumClustStand <- 0
# max. number of clusters when estimating the number of clusters. Higher
# numbers can drastically extend the computation time.
maxClust <- 10
data(protein_expressions)
dat <- protein_expressions
#### running statistical analysis and estimation of individual variances
statOut <- PrepareForVSClust(dat, NumReps, NumCond, isPaired, TRUE)
dat <- statOut$dat
Sds <- dat[,ncol(dat)]
cat(paste("Features:",nrow(dat),"\nMissing values:",
sum(is.na(dat)),"\nMedian standard deviations:",
round(median(Sds,na.rm=TRUE),digits=3)))
dat <- statOut$dat
data(protein_expressions)
dat <- protein_expressions
#### running statistical analysis and estimation of individual variances
statOut <- PrepareForVSClust(dat, NumReps, NumCond, isPaired, TRUE)
dat <- statOut$dat
Sds <- dat[,ncol(dat)]
cat(paste("Features:",nrow(dat),"\nMissing values:",
sum(is.na(dat)),"\nMedian standard deviations:",
round(median(Sds,na.rm=TRUE),digits=3)))
#### Estimate number of clusters with maxClust as maximum number clusters
#### to run the estimation with
ClustInd <- estimClustNum(dat, maxClust=maxClust, scaling="standardize", cores=cores)
#### Use estimate cluster number or use own
if (PreSetNumClustVSClust == 0)
PreSetNumClustVSClust <- optimalClustNum(ClustInd)
if (PreSetNumClustStand == 0)
PreSetNumClustStand <- optimalClustNum(ClustInd, method="FCM")
#### Visualize
estimClust.plot(ClustInd)
#### Run clustering (VSClust and standard fcm clustering
ClustOut <- runClustWrapper(dat,
PreSetNumClustVSClust,
NULL,
VSClust=TRUE,
scaling="standardize",
cores=cores)
#### Run clustering (VSClust and standard fcm clustering
ClustOut <- runClustWrapper(dat,
PreSetNumClustVSClust,
NULL,
VSClust=TRUE,
scaling="standardize",
cores=cores)
Bestcl <- ClustOut$Bestcl
VSClust_cl <- Bestcl
ClustOut <- runClustWrapper(dat, PreSetNumClustStand, NULL, VSClust=FALSE,
scaling="standardize", cores=cores)
Bestcl <- ClustOut$Bestcl
ClustOut <- runClustWrapper(dat, PreSetNumClustStand, NULL, VSClust=FALSE,
scaling="standardize", cores=cores)
Bestcl2 <- ClustOut$Bestcl
## Write clustering results (standard fcm)
write.csv(data.frame(cluster=Bestcl2$cluster,
ClustOut$outFileClust,
isClusterMember=rowMaxs(Bestcl2$membership)>0.5,
maxMembership=rowMaxs(Bestcl2$membership),
Bestcl2$membership),
paste(Experiment,
"FCMResults",
Sys.Date(),
".csv",
sep=""))
## Write coordinates of cluster centroids
write.csv(Bestcl2$centers, paste(Experiment,
"FCMResultsCentroids",
Sys.Date(),
".csv",
sep=""))
runFuncEnrich(Bestcl, infosource = "KEGG")
# Functional enrichment
ClustEnriched <- runFuncEnrich(Bestcl, infosource = "KEGG")
# Number of different experimental conditions (e.g. time points or sample
# types)
NumCond <- 6
dat <- read.csv("/tmp/MEMBRANEAllProteins.csv")
#### running statistical analysis and estimation of individual variances
statOut <- PrepareForVSClust(dat, NumReps, NumCond, isPaired, TRUE)
head(dat)
dat <- read.csv("/tmp/MEMBRANEAllProteins.csv", row.names=1)
runFuncEnrich(Bestcl, infosource = "KEGG")
#### running statistical analysis and estimation of individual variances
statOut <- PrepareForVSClust(dat, NumReps, NumCond, isPaired, TRUE)
dat <- statOut$dat
Sds <- dat[,ncol(dat)]
cat(paste("Features:",nrow(dat),"\nMissing values:",
sum(is.na(dat)),"\nMedian standard deviations:",
round(median(Sds,na.rm=TRUE),digits=3)))
#### Estimate number of clusters with maxClust as maximum number clusters
#### to run the estimation with
ClustInd <- estimClustNum(dat, maxClust=maxClust, scaling="standardize", cores=cores)
#### Estimate number of clusters with maxClust as maximum number clusters
#### to run the estimation with
ClustInd <- estimClustNum(dat, maxClust=maxClust, scaling="standardize", cores=cores)
#### Use estimate cluster number or use own
if (PreSetNumClustVSClust == 0)
PreSetNumClustVSClust <- optimalClustNum(ClustInd)
if (PreSetNumClustStand == 0)
PreSetNumClustStand <- optimalClustNum(ClustInd, method="FCM")
#### Visualize
estimClust.plot(ClustInd)
#### Run clustering (VSClust and standard fcm clustering
ClustOut <- runClustWrapper(dat,
PreSetNumClustVSClust,
NULL,
VSClust=TRUE,
scaling="standardize",
cores=cores)
#### Run clustering (VSClust and standard fcm clustering
ClustOut <- runClustWrapper(dat,
PreSetNumClustVSClust,
NULL,
VSClust=TRUE,
scaling="standardize",
cores=cores)
Bestcl <- ClustOut$Bestcl
VSClust_cl <- Bestcl
# Functional enrichment
ClustEnriched <- runFuncEnrich(VSClust_cl, infosource = "KEGG")
#### Run clustering (VSClust and standard fcm clustering
ClustOut <- runClustWrapper(dat,
PreSetNumClustVSClust,
NULL,
VSClust=TRUE,
scaling="standardize",
cores=cores)
#### Run clustering (VSClust and standard fcm clustering
ClustOut <- runClustWrapper(dat,
PreSetNumClustVSClust,
NULL,
VSClust=TRUE,
scaling="standardize",
cores=cores)
Bestcl <- ClustOut$Bestcl
VSClust_cl <- Bestcl
# Functional enrichment
ClustEnriched <- runFuncEnrich(VSClust_cl, infosource = "KEGG")
#### Run clustering (VSClust and standard fcm clustering
ClustOut <- runClustWrapper(dat,
PreSetNumClustVSClust,
NULL,
VSClust=TRUE,
scaling="standardize",
cores=cores)
#### Run clustering (VSClust and standard fcm clustering
ClustOut <- runClustWrapper(dat,
PreSetNumClustVSClust,
NULL,
VSClust=TRUE,
scaling="standardize",
cores=cores)
Bestcl <- ClustOut$Bestcl
VSClust_cl <- Bestcl
# Functional enrichment
ClustEnriched <- runFuncEnrich(VSClust_cl, infosource = "KEGG")
#### Run clustering (VSClust and standard fcm clustering
ClustOut <- runClustWrapper(dat,
PreSetNumClustVSClust,
NULL,
VSClust=TRUE,
scaling="standardize",
cores=cores)
#### Run clustering (VSClust and standard fcm clustering
ClustOut <- runClustWrapper(dat,
PreSetNumClustVSClust,
NULL,
VSClust=TRUE,
scaling="standardize",
cores=cores)
Bestcl <- ClustOut$Bestcl
VSClust_cl <- Bestcl
# Functional enrichment
ClustEnriched <- runFuncEnrich(VSClust_cl, infosource = "KEGG")
# Functional enrichment
ClustEnriched <- runFuncEnrich(VSClust_cl, infosource = "KEGG")
# Plot the top 10 most enriched KEGG pathways
dotplot(ClustEnriched, showCategory=10, title="KEGG enrichment")
# Plot the top 10 most enriched KEGG pathways
enrichplot::dotplot(ClustEnriched, showCategory=10, title="KEGG enrichment")
??dotplot
# Load the clusterProfiler package
library(clusterProfiler)
# Plot the top 10 most enriched KEGG pathways
dotplot(ClustEnriched, showCategory=10, title="KEGG enrichment")
?dotplot
# Plot the top 10 most enriched KEGG pathways
dotplot(ClustEnriched, showCategory=10, title="KEGG enrichment")
class(ClustEnriched)
lapply(ClustEnriched, class)
# Take the reduce version of the enrichment (redFuncs), not the full one
# (fullFuncs)
ClustEnriched <- ClustEnriched$redFuncs
# Plot the top 10 most enriched KEGG pathways
dotplot(ClustEnriched, showCategory=10, title="KEGG enrichment")
ClustEnriched$BHI
ClustEnriched
# Plot the top 10 most enriched KEGG pathways
dotplot(ClustEnriched, showCategory=10, title="KEGG enrichment", size = "count")
# Functional enrichment
ClustEnriched <- runFuncEnrich(VSClust_cl, infosource = "KEGG")
ClustEnriched$BHI
devtools::load_all()
# Functional enrichment
ClustEnriched <- runFuncEnrich(VSClust_cl, infosource = "KEGG")
calcBHI
runFuncEnrich
ClustEnriched[[1]]@geneClusters
names(ClustEnriched)
cl <- VSClust_cl
Accs <- list()
for (c in seq_len(max(cl$cluster))) {
cname <- paste("Cluster", c, sep = "_")
Accs[[cname]] <-
names(which(cl$cluster == c & rowMaxs(cl$membership) > 0.5))
Accs[[cname]] <- Accs[[cname]][Accs[[cname]] != ""]
if (length(Accs[[cname]]) > 0) {
if (!is.null(protnames)) {
Accs[[cname]] <- as.character(protnames[Accs[[cname]]])
}
Accs[[cname]] <- sub("-[0-9]", "", Accs[[cname]])
}
}
Accs <- list()
for (c in seq_len(max(cl$cluster))) {
cname <- paste("Cluster", c, sep = "_")
Accs[[cname]] <-
names(which(cl$cluster == c & rowMaxs(cl$membership) > 0.5))
Accs[[cname]] <- Accs[[cname]][Accs[[cname]] != ""]
}
Accs
BHI <- calcBHI(Accs, ClustEnriched$redFuncs)
BHI
BHI <- calcBHI(Accs, ClustEnriched$rfullFuncs)
BHI <- calcBHI(Accs, ClustEnriched$fullFuncs)
BHI
calcBHI(Accs, ClustEnriched$fullFuncs)
devtools::load_all()
calcBHI(Accs, ClustEnriched$fullFuncs)
devtools::load_all()
devtools::load_all()
calcBHI(Accs, ClustEnriched$fullFuncs)
devtools::load_all()
calcBHI(Accs, ClustEnriched$fullFuncs)
calcBHI(Accs, ClustEnriched$fullFuncs)
devtools::load_all()
calcBHI(Accs, ClustEnriched$fullFuncs)
devtools::load_all()
calcBHI(Accs, ClustEnriched$fullFuncs)
# Functional enrichment
ClustEnriched <- runFuncEnrich(VSClust_cl, infosource = "KEGG")
devtools::load_all()
# Functional enrichment
ClustEnriched <- runFuncEnrich(VSClust_cl, infosource = "KEGG")
calcBHI(Accs, ClustEnriched$fullFuncs)
ClustEnriched$fullFuncs@geneClusters
ClustEnriched$fullFuncs
as.data.frame(ClustEnriched$fullFuncs@compareClusterResult)
as.data.frame(ClustEnriched$fullFuncs@compareClusterResult)$Cluster
as.data.frame(ClustEnriched$fullFuncs@compareClusterResult)$geneID
devtools::load_all()
calcBHI(Accs, ClustEnriched$fullFuncs)
devtools::load_all()
calcBHI(Accs, ClustEnriched$fullFuncs)
devtools::load_all()
calcBHI(Accs, ClustEnriched$fullFuncs)
p <- "Q80SW1,P50247,Q61753,P14152,F8WGT1"
strplit(p, ",")
strsplit(p, ",")
devtools::load_all()
calcBHI(Accs, ClustEnriched$fullFuncs)
devtools::load_all()
calcBHI(Accs, ClustEnriched$fullFuncs)
devtools::load_all()
calcBHI(Accs, ClustEnriched$fullFuncs)
devtools::load_all()
calcBHI(Accs, ClustEnriched$fullFuncs)
devtools::load_all()
calcBHI(Accs, ClustEnriched$fullFuncs)
devtools::check()
